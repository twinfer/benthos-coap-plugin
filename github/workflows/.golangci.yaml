# .golangci.yml
run:
  timeout: 10m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - bin
    - tmp
    - vendor
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  path-prefix: ""
  sort-results: false

linters-settings:
  dupl:
    threshold: 100

  errcheck:
    check-type-assertions: true
    check-blank: true

  exhaustive:
    check-generated: false
    default-signifies-exhaustive: false

  forbidigo:
    forbid:
      - ^print.*$
      - 'fmt\.Print.*'

  funlen:
    lines: 100
    statements: 50

  gci:
    local-prefixes: github.com/your-org/benthos-coap

  goconst:
    min-len: 2
    min-occurrences: 2

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc

  gocyclo:
    min-complexity: 15

  godot:
    scope: declarations
    capital: false

  gofmt:
    simplify: true

  goimports:
    local-prefixes: github.com/your-org/benthos-coap

  gomnd:
    settings:
      mnd:
        checks:
          - argument
          - case
          - condition
          - operation
          - return

  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  lll:
    line-length: 140

  maligned:
    suggest-new: true

  misspell:
    locale: US

  nolintlint:
    allow-leading-space: true
    allow-unused: false
    require-explanation: false
    require-specific: false

  prealloc:
    simple: true
    range-loops: true
    for-loops: false

  predeclared:
    ignore: ""
    q: false

  revive:
    min-confidence: 0

  staticcheck:
    go: "1.20"
    checks: ["all"]

  stylecheck:
    go: "1.20"
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]

  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  tenv:
    all: false

  testpackage:
    skip-regexp: (export|internal)_test\.go

  unparam:
    check-exported: false

  unused:
    go: "1.20"

  whitespace:
    multi-if: false
    multi-func: false

  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-cuddle-declarations: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    allow-separated-leading-comment: false

linters:
  disable-all: true
  enable:
    - bodyclose
    - deadcode
    - depguard
    - dogsled
    - dupl
    - errcheck
    - exportloopref
    - exhaustive
    - funlen
    - gci
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - godot
    - gofmt
    - goimports
    - gomnd
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - makezero
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - prealloc
    - predeclared
    - revive
    - rowserrcheck
    - staticcheck
    - structcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - whitespace
    - wsl

issues:
  exclude-use-default: false
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print.*|os\.(Un)?Setenv). is not checked
    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
    # gosec: Too many false-positives on 'unsafe' usage
    - G103
    # gosec: Too many false-positives for parametrized shell calls
    - G204
    # gosec: Duplicated errcheck checks
    - G104
    # gocritic: Too many false-positives for function results
    - (hugeParam|rangeValCopy|exitAfterDefer)

  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - lll

    - path: pkg/testing/
      linters:
        - gomnd
        - funlen
        - gocyclo
        - dupl

    - path: cmd/
      linters:
        - gomnd

    - linters:
        - lll
      source: "^//go:generate "

    - linters:
        - gocritic
      text: "unnecessaryDefer:"

severity:
  default-severity: error
  case-sensitive: false
  rules:
    - linters:
        - dupl
      severity: info
    - linters:
        - misspell
      severity: warning